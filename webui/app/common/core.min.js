(function (dataAndEvents) {
    /**
     * @return {undefined}
     */
    function Canvas() {
        if (Canvas["prototype"]["_singleton"]) {
            throw new Error("WebMidi is a singleton, it cannot be instantiated directly.");
        }
        Canvas["prototype"]["_singleton"] = this;
        /** @type {Array} */
        this["_inputs"] = [];
        /** @type {Array} */
        this["_outputs"] = [];
        this["_userHandlers"] = {};
        /** @type {Array} */
        this["_stateChangeQueue"] = [];
        /** @type {boolean} */
        this["_processingStateChange"] = false;
        /** @type {Array} */
        this["_midiInterfaceEvents"] = ["connected", "disconnected"];
        /** @type {Array} */
        this["_notes"] = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
        this["_semitones"] = {
            "C": 0,
            "D": 2,
            "E": 4,
            "F": 5,
            "G": 7,
            "A": 9,
            "B": 11
        };
        Object["defineProperties"](this, {
            MIDI_SYSTEM_MESSAGES: {
                value: {
                    "sysex": 240,
                    "timecode": 241,
                    "songposition": 242,
                    "songselect": 243,
                    "tuningrequest": 246,
                    "sysexend": 247,
                    "clock": 248,
                    "start": 250,
                    "continue": 251,
                    "stop": 252,
                    "activesensing": 254,
                    "reset": 255,
                    "transport": 127,
                    "unknownsystemmessage": -1
                },
                writable: false,
                enumerable: true,
                configurable: false
            },
            MIDI_CHANNEL_MESSAGES: {
                value: {
                    "noteoff": 8,
                    "noteon": 9,
                    "keyaftertouch": 10,
                    "controlchange": 11,
                    "channelmode": 11,
                    "programchange": 12,
                    "channelaftertouch": 13,
                    "pitchbend": 14
                },
                writable: false,
                enumerable: true,
                configurable: false
            },
            MIDI_REGISTERED_PARAMETER: {
                value: {
                    "pitchbendrange": [0, 0],
                    "channelfinetuning": [0, 1],
                    "channelcoarsetuning": [0, 2],
                    "tuningprogram": [0, 3],
                    "tuningbank": [0, 4],
                    "modulationrange": [0, 5],
                    "azimuthangle": [61, 0],
                    "elevationangle": [61, 1],
                    "gain": [61, 2],
                    "distanceratio": [61, 3],
                    "maximumdistance": [61, 4],
                    "maximumdistancegain": [61, 5],
                    "referencedistanceratio": [61, 6],
                    "panspreadangle": [61, 7],
                    "rollangle": [61, 8]
                },
                writable: false,
                enumerable: true,
                configurable: false
            },
            MIDI_CONTROL_CHANGE_MESSAGES: {
                value: {
                    "bankselectcoarse": 0,
                    "modulationwheelcoarse": 1,
                    "breathcontrollercoarse": 2,
                    "footcontrollercoarse": 4,
                    "portamentotimecoarse": 5,
                    "dataentrycoarse": 6,
                    "volumecoarse": 7,
                    "balancecoarse": 8,
                    "pancoarse": 10,
                    "expressioncoarse": 11,
                    "effectcontrol1coarse": 12,
                    "effectcontrol2coarse": 13,
                    "generalpurposeslider1": 16,
                    "generalpurposeslider2": 17,
                    "generalpurposeslider3": 18,
                    "generalpurposeslider4": 19,
                    "bankselectfine": 32,
                    "modulationwheelfine": 33,
                    "breathcontrollerfine": 34,
                    "footcontrollerfine": 36,
                    "portamentotimefine": 37,
                    "dataentryfine": 38,
                    "volumefine": 39,
                    "balancefine": 40,
                    "panfine": 42,
                    "expressionfine": 43,
                    "effectcontrol1fine": 44,
                    "effectcontrol2fine": 45,
                    "holdpedal": 64,
                    "portamento": 65,
                    "sustenutopedal": 66,
                    "softpedal": 67,
                    "legatopedal": 68,
                    "hold2pedal": 69,
                    "soundvariation": 70,
                    "resonance": 71,
                    "soundreleasetime": 72,
                    "soundattacktime": 73,
                    "brightness": 74,
                    "soundcontrol6": 75,
                    "soundcontrol7": 76,
                    "soundcontrol8": 77,
                    "soundcontrol9": 78,
                    "soundcontrol10": 79,
                    "generalpurposebutton1": 80,
                    "generalpurposebutton2": 81,
                    "generalpurposebutton3": 82,
                    "generalpurposebutton4": 83,
                    "reverblevel": 91,
                    "tremololevel": 92,
                    "choruslevel": 93,
                    "celestelevel": 94,
                    "phaserlevel": 95,
                    "databuttonincrement": 96,
                    "databuttondecrement": 97,
                    "nonregisteredparametercoarse": 98,
                    "nonregisteredparameterfine": 99,
                    "registeredparametercoarse": 100,
                    "registeredparameterfine": 101
                },
                writable: false,
                enumerable: true,
                configurable: false
            },
            MIDI_CHANNEL_MODE_MESSAGES: {
                value: {
                    "allsoundoff": 120,
                    "resetallcontrollers": 121,
                    "localcontrol": 122,
                    "allnotesoff": 123,
                    "omnimodeoff": 124,
                    "omnimodeon": 125,
                    "monomodeon": 126,
                    "polymodeon": 127
                },
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
        Object["defineProperties"](this, {
            supported: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return "requestMIDIAccess" in navigator;
                }
            },
            enabled: {
                enumerable: true,
                get: function () {
                    return this["interface"] !== undefined;
                } ["bind"](this)
            },
            inputs: {
                enumerable: true,
                get: function () {
                    return this["_inputs"];
                } ["bind"](this)
            },
            outputs: {
                enumerable: true,
                get: function () {
                    return this["_outputs"];
                } ["bind"](this)
            },
            sysexEnabled: {
                enumerable: true,
                get: function () {
                    return !!(this["interface"] && this["interface"]["sysexEnabled"]);
                } ["bind"](this)
            },
            time: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return window["performance"]["now"]();
                }
            }
        });
    }
    /**
     * @param {?} hash
     * @return {undefined}
     */
    function Hash(hash) {
        var _0xe3eex20 = this;
        this["_userHandlers"] = {
            "channel": {},
            "system": {}
        };
        this["_midiInput"] = hash;
        Object["defineProperties"](this, {
            connection: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiInput"]["connection"];
                }
            },
            id: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiInput"]["id"];
                }
            },
            manufacturer: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiInput"]["manufacturer"];
                }
            },
            name: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiInput"]["name"];
                }
            },
            state: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiInput"]["state"];
                }
            }
        });
        this._initializeUserHandlers();
    }
    /**
     * @param {?} app
     * @return {undefined}
     */
    function Storage(app) {
        var _0xe3eex20 = this;
        this["_midiOutput"] = app;
        Object["defineProperties"](this, {
            connection: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiOutput"]["connection"];
                }
            },
            id: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiOutput"]["id"];
                }
            },
            manufacturer: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiOutput"]["manufacturer"];
                }
            },
            name: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiOutput"]["name"];
                }
            },
            state: {
                enumerable: true,
                /**
                 * @return {?}
                 */
                get: function () {
                    return _0xe3eex20["_midiOutput"]["state"];
                }
            }
        });
    }
    "use strict";
    var result = new Canvas;
    /**
     * @param {?} done
     * @param {?} dataAndEvents
     * @return {undefined}
     */
    Canvas["prototype"]["enable"] = function (done, dataAndEvents) {
        if (this["enabled"]) {
            return;
        }
        if (!this["supported"]) {
            if (typeof done === "function") {
                done(new Error("The Web MIDI API is not supported by your browser."));
            }
            return;
        }
        navigator["requestMIDIAccess"]({
            "sysex": dataAndEvents
        })["then"](function (dataAndEvents) {
            this["interface"] = dataAndEvents;
            this._resetInterfaceUserHandlers();
            this["interface"]["onstatechange"] = this["_onInterfaceStateChange"]["bind"](this);
            this._onInterfaceStateChange(null);
            if (typeof done === "function") {
                done["call"](this);
            }
        } ["bind"](this), function (deepDataAndEvents) {
            if (typeof done === "function") {
                done["call"](this, deepDataAndEvents);
            }
        } ["bind"](this));
    };
    /**
     * @return {undefined}
     */
    Canvas["prototype"]["disable"] = function () {
        if (!this["supported"]) {
            throw new Error("The Web MIDI API is not supported by your browser.");
        }
        this["interface"] = undefined;
        /** @type {Array} */
        this["_inputs"] = [];
        /** @type {Array} */
        this["_outputs"] = [];
        this._resetInterfaceUserHandlers();
    };
    /**
     * @param {?} $conditional
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    Canvas["prototype"]["addListener"] = function ($conditional, deepDataAndEvents) {
        if (!this["enabled"]) {
            throw new Error("WebMidi must be enabled before adding event listeners.");
        }
        if (typeof deepDataAndEvents !== "function") {
            throw new TypeError("The 'listener' parameter must be a function.");
        }
        if (this["_midiInterfaceEvents"]["indexOf"]($conditional) >= 0) {
            this["_userHandlers"][$conditional]["push"](deepDataAndEvents);
        } else {
            throw new TypeError("The specified event type is not supported.");
        }
        return this;
    };
    /**
     * @param {?} label
     * @param {?} item
     * @return {?}
     */
    Canvas["prototype"]["hasListener"] = function (label, item) {
        if (!this["enabled"]) {
            throw new Error("WebMidi must be enabled before checking event listeners.");
        }
        if (typeof item !== "function") {
            throw new TypeError("The 'listener' parameter must be a function.");
        }
        if (this["_midiInterfaceEvents"]["indexOf"](label) >= 0) {
            /** @type {number} */
            var i = 0;
            for (; i < this["_userHandlers"][label]["length"]; i++) {
                if (this["_userHandlers"][label][i] === item) {
                    return true;
                }
            }
        } else {
            throw new TypeError("The specified event type is not supported.");
        }
        return false;
    };
    /**
     * @param {number} tag
     * @param {?} item
     * @return {?}
     */
    Canvas["prototype"]["removeListener"] = function (tag, item) {
        if (!this["enabled"]) {
            throw new Error("WebMidi must be enabled before removing event listeners.");
        }
        if (item !== undefined && typeof item !== "function") {
            throw new TypeError("The 'listener' parameter must be a function.");
        }
        if (this["_midiInterfaceEvents"]["indexOf"](tag) >= 0) {
            if (item) {
                /** @type {number} */
                var i = 0;
                for (; i < this["_userHandlers"][tag]["length"]; i++) {
                    if (this["_userHandlers"][tag][i] === item) {
                        this["_userHandlers"][tag]["splice"](i, 1);
                    }
                }
            } else {
                /** @type {Array} */
                this["_userHandlers"][tag] = [];
            }
        } else {
            if (tag === undefined) {
                this._resetInterfaceUserHandlers();
            } else {
                throw new TypeError("The specified event type is not supported.");
            }
        }
        return this;
    };
    /**
     * @param {?} dataAndEvents
     * @return {?}
     */
    Canvas["prototype"]["getInputById"] = function (dataAndEvents) {
        if (!this["enabled"]) {
            throw new Error("WebMidi is not enabled.");
        }
        /** @type {number} */
        var unlock = 0;
        for (; unlock < this["inputs"]["length"]; unlock++) {
            if (this["inputs"][unlock]["id"] === dataAndEvents) {
                return this["inputs"][unlock];
            }
        }
        return false;
    };
    /**
     * @param {?} dataAndEvents
     * @return {?}
     */
    Canvas["prototype"]["getOutputById"] = function (dataAndEvents) {
        if (!this["enabled"]) {
            throw new Error("WebMidi is not enabled.");
        }
        /** @type {number} */
        var unlock = 0;
        for (; unlock < this["outputs"]["length"]; unlock++) {
            if (this["outputs"][unlock]["id"] === dataAndEvents) {
                return this["outputs"][unlock];
            }
        }
        return false;
    };
    /**
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    Canvas["prototype"]["getInputByName"] = function (deepDataAndEvents) {
        if (!this["enabled"]) {
            throw new Error("WebMidi is not enabled.");
        }
        /** @type {number} */
        var unlock = 0;
        for (; unlock < this["inputs"]["length"]; unlock++) {
            if (~this["inputs"][unlock]["name"]["indexOf"](deepDataAndEvents)) {
                return this["inputs"][unlock];
            }
        }
        return false;
    };
    /**
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    Canvas["prototype"]["getOutputByName"] = function (deepDataAndEvents) {
        if (!this["enabled"]) {
            throw new Error("WebMidi is not enabled.");
        }
        /** @type {number} */
        var unlock = 0;
        for (; unlock < this["outputs"]["length"]; unlock++) {
            if (~this["outputs"][unlock]["name"]["indexOf"](deepDataAndEvents)) {
                return this["outputs"][unlock];
            }
        }
        return false;
    };
    /**
     * @param {number} x
     * @return {?}
     */
    Canvas["prototype"]["guessNoteNumber"] = function (x) {
        /** @type {boolean} */
        var c3 = false;
        if (x && (x["toFixed"] && (x >= 0 && x <= 127))) {
            c3 = Math["round"](x);
        } else {
            if (parseInt(x) >= 0 && parseInt(x) <= 127) {
                /** @type {number} */
                c3 = parseInt(x);
            } else {
                if (typeof x === "string" || x instanceof String) {
                    c3 = this["noteNameToNumber"](x);
                }
            }
        }
        if (c3 === false) {
            throw new Error("Invalid note number (" + x + ").");
        }
        return c3;
    };
    /**
     * @param {Text} dataAndEvents
     * @return {?}
     */
    Canvas["prototype"]["noteNameToNumber"] = function (dataAndEvents) {
        if (typeof dataAndEvents !== "string") {
            dataAndEvents = "";
        }
        var octalLiteral = dataAndEvents["match"](/([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)/i);
        if (!octalLiteral) {
            throw new RangeError("Invalid note name.");
        }
        var queueHooks = result["_semitones"][octalLiteral[1]["toUpperCase"]()];
        /** @type {number} */
        var charCodeToReplace = parseInt(octalLiteral[3]);
        var key = (charCodeToReplace + 2) * 12 + queueHooks;
        if (octalLiteral[2]["toLowerCase"]()["indexOf"]("b") > -1) {
            key -= octalLiteral[2]["length"];
        } else {
            if (octalLiteral[2]["toLowerCase"]()["indexOf"]("#") > -1) {
                key += octalLiteral[2]["length"];
            }
        }
        if (queueHooks < 0 || (charCodeToReplace < -2 || (charCodeToReplace > 8 || (key < 0 || key > 127)))) {
            throw new RangeError("Invalid note name or note outside valid range.");
        }
        return key;
    };
    /**
     * @return {undefined}
     */
    Canvas["prototype"]["_updateInputsAndOutputs"] = function () {
        this._updateInputs();
        this._updateOutputs();
    };
    /**
     * @return {undefined}
     */
    Canvas["prototype"]["_updateInputs"] = function () {
        /** @type {number} */
        var sel = 0;
        for (; sel < this["_inputs"]["length"]; sel++) {
            /** @type {boolean} */
            var _0xe3eex14 = true;
            var _0xe3eex15 = this["interface"]["inputs"]["values"]();
            var _0xe3eexe = _0xe3eex15["next"]();
            for (; _0xe3eexe && !_0xe3eexe["done"]; _0xe3eexe = _0xe3eex15["next"]()) {
                if (this["_inputs"][sel]["_midiInput"] === _0xe3eexe["value"]) {
                    /** @type {boolean} */
                    _0xe3eex14 = false;
                    break;
                }
            }
            if (_0xe3eex14) {
                this["_inputs"]["splice"](sel, 1);
            }
        }
        this["interface"]["inputs"]["forEach"](function (deepDataAndEvents) {
            /** @type {boolean} */
            var _0xe3eex17 = true;
            /** @type {number} */
            var unlock = 0;
            for (; unlock < this["_inputs"]["length"]; unlock++) {
                if (this["_inputs"][unlock]["_midiInput"] === deepDataAndEvents) {
                    /** @type {boolean} */
                    _0xe3eex17 = false;
                }
            }
            if (_0xe3eex17) {
                this["_inputs"]["push"](this._createInput(deepDataAndEvents));
            }
        } ["bind"](this));
    };
    /**
     * @return {undefined}
     */
    Canvas["prototype"]["_updateOutputs"] = function () {
        /** @type {number} */
        var sel = 0;
        for (; sel < this["_outputs"]["length"]; sel++) {
            /** @type {boolean} */
            var _0xe3eex14 = true;
            var _0xe3eex15 = this["interface"]["outputs"]["values"]();
            var _0xe3eexf = _0xe3eex15["next"]();
            for (; _0xe3eexf && !_0xe3eexf["done"]; _0xe3eexf = _0xe3eex15["next"]()) {
                if (this["_outputs"][sel]["_midiOutput"] === _0xe3eexf["value"]) {
                    /** @type {boolean} */
                    _0xe3eex14 = false;
                    break;
                }
            }
            if (_0xe3eex14) {
                this["_outputs"]["splice"](sel, 1);
            }
        }
        this["interface"]["outputs"]["forEach"](function (deepDataAndEvents) {
            /** @type {boolean} */
            var _0xe3eex17 = true;
            /** @type {number} */
            var unlock = 0;
            for (; unlock < this["_outputs"]["length"]; unlock++) {
                if (this["_outputs"][unlock]["_midiOutput"] === deepDataAndEvents) {
                    /** @type {boolean} */
                    _0xe3eex17 = false;
                }
            }
            if (_0xe3eex17) {
                this["_outputs"]["push"](this._createOutput(deepDataAndEvents));
            }
        } ["bind"](this));
    };
    /**
     * @param {?} object
     * @return {?}
     */
    Canvas["prototype"]["_createInput"] = function (object) {
        var h = new Hash(object);
        h["_midiInput"]["onmidimessage"] = h["_onMidiMessage"]["bind"](h);
        return h;
    };
    /**
     * @param {?} uri
     * @return {?}
     */
    Canvas["prototype"]["_createOutput"] = function (uri) {
        var uriObj = new Storage(uri);
        uriObj["_midiOutput"]["onmidimessage"] = uriObj["_onMidiMessage"]["bind"](uriObj);
        return uriObj;
    };
    /**
     * @param {?} deepDataAndEvents
     * @return {undefined}
     */
    Canvas["prototype"]["_onInterfaceStateChange"] = function (deepDataAndEvents) {
        this["_stateChangeQueue"]["push"](deepDataAndEvents);
        if (this["_processingStateChange"]) {
            return;
        }
        /** @type {boolean} */
        this["_processingStateChange"] = true;
        for (; this["_stateChangeQueue"]["length"] > 0;) {
            this._processStateChange(this["_stateChangeQueue"]["shift"]());
        }
        /** @type {boolean} */
        this["_processingStateChange"] = false;
    };
    /**
     * @param {?} dataAndEvents
     * @return {undefined}
     */
    Canvas["prototype"]["_processStateChange"] = function (dataAndEvents) {
        this._updateInputsAndOutputs();
        if (dataAndEvents === null) {
            return;
        }
        var out = {
            timestamp: dataAndEvents["timeStamp"],
            type: dataAndEvents["port"]["state"],
            id: dataAndEvents["port"]["id"],
            manufacturer: dataAndEvents["port"]["manufacturer"],
            name: dataAndEvents["port"]["name"]
        };
        if (dataAndEvents["port"]["state"] === "connected") {
            if (dataAndEvents["port"]["type"] === "output") {
                out["output"] = this["getOutputById"](dataAndEvents["port"]["id"]);
            } else {
                if (dataAndEvents["port"]["type"] === "input") {
                    out["input"] = this["getInputById"](dataAndEvents["port"]["id"]);
                }
            }
        }
        this["_userHandlers"][dataAndEvents["port"]["state"]]["forEach"](function (done) {
            done(out);
        });
    };
    /**
     * @return {undefined}
     */
    Canvas["prototype"]["_resetInterfaceUserHandlers"] = function () {
        /** @type {number} */
        var unlock = 0;
        for (; unlock < this["_midiInterfaceEvents"]["length"]; unlock++) {
            /** @type {Array} */
            this["_userHandlers"][this["_midiInterfaceEvents"][unlock]] = [];
        }
    };
    /**
     * @param {?} col
     * @param {Array} data
     * @param {?} deepDataAndEvents
     * @return {?}
     */
    Hash["prototype"]["addListener"] = function (col, data, deepDataAndEvents) {
        var _0xe3eex20 = this;
        if (data === undefined) {
            data = "all";
        }
        if (!Array["isArray"](data)) {
            /** @type {Array} */
            data = [data];
        }
        data["forEach"](function (dataAndEvents) {
            if (dataAndEvents !== "all" && !(dataAndEvents >= 1 && dataAndEvents <= 16)) {
                throw new RangeError("The 'channel' parameter is invalid.");
            }
        });
        if (typeof deepDataAndEvents !== "function") {
            throw new TypeError("The 'listener' parameter must be a function.");
        }
        if (result["MIDI_SYSTEM_MESSAGES"][col]) {
            if (!this["_userHandlers"]["system"][col]) {
                /** @type {Array} */
                this["_userHandlers"]["system"][col] = [];
            }
            this["_userHandlers"]["system"][col]["push"](deepDataAndEvents);
        } else {
            if (result["MIDI_CHANNEL_MESSAGES"][col]) {
                if (data["indexOf"]("all") > -1) {
                    /** @type {Array} */
                    data = [];
                    /** @type {number} */
                    var dataPointer = 1;
                    for (; dataPointer <= 16; dataPointer++) {
                        data["push"](dataPointer);
                    }
                }
                if (!this["_userHandlers"]["channel"][col]) {
                    /** @type {Array} */
                    this["_userHandlers"]["channel"][col] = [];
                }
                data["forEach"](function (row) {
                    if (!_0xe3eex20["_userHandlers"]["channel"][col][row]) {
                        /** @type {Array} */
                        _0xe3eex20["_userHandlers"]["channel"][col][row] = [];
                    }
                    _0xe3eex20["_userHandlers"]["channel"][col][row]["push"](deepDataAndEvents);
                });
            } else {
                throw new TypeError("The specified event type is not supported.");
            }
        }
        return this;
    };
    Hash["prototype"]["on"] = Hash["prototype"]["addListener"];
    /**
     * @param {?} id
     * @param {Array} idx
     * @param {?} item
     * @return {?}
     */
    Hash["prototype"]["hasListener"] = function (id, idx, item) {
        var _0xe3eex20 = this;
        if (typeof item !== "function") {
            throw new TypeError("The 'listener' parameter must be a function.");
        }
        if (idx === undefined) {
            idx = "all";
        }
        if (idx["constructor"] !== Array) {
            /** @type {Array} */
            idx = [idx];
        }
        if (result["MIDI_SYSTEM_MESSAGES"][id]) {
            /** @type {number} */
            var i = 0;
            for (; i < this["_userHandlers"]["system"][id]["length"]; i++) {
                if (this["_userHandlers"]["system"][id][i] === item) {
                    return true;
                }
            }
        } else {
            if (result["MIDI_CHANNEL_MESSAGES"][id]) {
                if (idx["indexOf"]("all") > -1) {
                    /** @type {Array} */
                    idx = [];
                    /** @type {number} */
                    var r20 = 1;
                    for (; r20 <= 16; r20++) {
                        idx["push"](r20);
                    }
                }
                if (!this["_userHandlers"]["channel"][id]) {
                    return false;
                }
                return idx["every"](function (name) {
                    var set = _0xe3eex20["_userHandlers"]["channel"][id][name];
                    return set && set["indexOf"](item) > -1;
                });
            }
        }
        return false;
    };
    /**
     * @param {number} c
     * @param {Array} idx
     * @param {boolean} value
     * @return {?}
     */
    Hash["prototype"]["removeListener"] = function (c, idx, value) {
        var _0xe3eex20 = this;
        if (value !== undefined && typeof value !== "function") {
            throw new TypeError("The 'listener' parameter must be a function.");
        }
        if (idx === undefined) {
            idx = "all";
        }
        if (idx["constructor"] !== Array) {
            /** @type {Array} */
            idx = [idx];
        }
        if (result["MIDI_SYSTEM_MESSAGES"][c]) {
            if (value === undefined) {
                /** @type {Array} */
                this["_userHandlers"]["system"][c] = [];
            } else {
                /** @type {number} */
                var i = 0;
                for (; i < this["_userHandlers"]["system"][c]["length"]; i++) {
                    if (this["_userHandlers"]["system"][c][i] === value) {
                        this["_userHandlers"]["system"][c]["splice"](i, 1);
                    }
                }
            }
        } else {
            if (result["MIDI_CHANNEL_MESSAGES"][c]) {
                if (idx["indexOf"]("all") > -1) {
                    /** @type {Array} */
                    idx = [];
                    /** @type {number} */
                    var r20 = 1;
                    for (; r20 <= 16; r20++) {
                        idx["push"](r20);
                    }
                }
                if (!this["_userHandlers"]["channel"][c]) {
                    return this;
                }
                idx["forEach"](function (index) {
                    var el = _0xe3eex20["_userHandlers"]["channel"][c][index];
                    if (!el) {
                        return;
                    }
                    if (value === undefined) {
                        /** @type {Array} */
                        _0xe3eex20["_userHandlers"]["channel"][c][index] = [];
                    } else {
                        /** @type {number} */
                        var k = 0;
                        for (; k < el["length"]; k++) {
                            if (el[k] === value) {
                                el["splice"](k, 1);
                            }
                        }
                    }
                });
            } else {
                if (c === undefined) {
                    this._initializeUserHandlers();
                } else {
                    throw new TypeError("The specified event type is not supported.");
                }
            }
        }
        return this;
    };
    /**
     * @return {undefined}
     */
    Hash["prototype"]["_initializeUserHandlers"] = function () {
        var actor;
        for (actor in result["MIDI_CHANNEL_MESSAGES"]) {
            if (result["MIDI_CHANNEL_MESSAGES"]["hasOwnProperty"](actor)) {
                this["_userHandlers"]["channel"][actor] = {};
            }
        }
        var ip;
        for (ip in result["MIDI_SYSTEM_MESSAGES"]) {
            if (result["MIDI_SYSTEM_MESSAGES"]["hasOwnProperty"](ip)) {
                /** @type {Array} */
                this["_userHandlers"]["system"][ip] = [];
            }
        }
    };
    /**
     * @param {?} deepDataAndEvents
     * @return {undefined}
     */
    Hash["prototype"]["_onMidiMessage"] = function (deepDataAndEvents) {
        if (deepDataAndEvents["data"][0] < 240) {
            this._parseChannelEvent(deepDataAndEvents);
        } else {
            if (deepDataAndEvents["data"][0] <= 255) {
                this._parseSystemEvent(deepDataAndEvents);
            }
        }
    };
    /**
     * @param {?} docs
     * @return {undefined}
     */
    Hash["prototype"]["_parseChannelEvent"] = function (docs) {
        /** @type {number} */
        var total = docs["data"][0] >> 4;
        /** @type {number} */
        var ch = (docs["data"][0] & 15) + 1;
        var i;
        var val;
        if (docs["data"]["length"] > 1) {
            i = docs["data"][1];
            val = docs["data"]["length"] > 2 ? docs["data"][2] : undefined;
        }
        var data = {
            "target": this,
            "data": docs["data"],
            "timestamp": docs["timeStamp"],
            "channel": ch
        };
        if (total === result["MIDI_CHANNEL_MESSAGES"]["noteoff"] || total === result["MIDI_CHANNEL_MESSAGES"]["noteon"] && val === 0) {
            data["type"] = "noteoff";
            data["note"] = {
                "number": i,
                "name": result["_notes"][i % 12],
                "octave": Math["floor"](i / 12 - 1) - 3
            };
            /** @type {number} */
            data["velocity"] = val / 127;
            data["rawVelocity"] = val;
        } else {
            if (total === result["MIDI_CHANNEL_MESSAGES"]["noteon"]) {
                data["type"] = "noteon";
                data["note"] = {
                    "number": i,
                    "name": result["_notes"][i % 12],
                    "octave": Math["floor"](i / 12 - 1) - 3
                };
                /** @type {number} */
                data["velocity"] = val / 127;
                data["rawVelocity"] = val;
            } else {
                if (total === result["MIDI_CHANNEL_MESSAGES"]["keyaftertouch"]) {
                    data["type"] = "keyaftertouch";
                    data["note"] = {
                        "number": i,
                        "name": result["_notes"][i % 12],
                        "octave": Math["floor"](i / 12 - 1) - 3
                    };
                    /** @type {number} */
                    data["value"] = val / 127;
                } else {
                    if (total === result["MIDI_CHANNEL_MESSAGES"]["controlchange"] && (i >= 0 && i <= 127)) {
                        data["type"] = "controlchange";
                        data["controller"] = {
                            "number": i,
                            "name": this["getCcNameByNumber"](i)
                        };
                        data["value"] = val;
                    } else {
                        if (total === result["MIDI_CHANNEL_MESSAGES"]["channelmode"] && (i >= 120 && i <= 127)) {
                            data["type"] = "channelmode";
                            data["controller"] = {
                                "number": i,
                                "name": this["getChannelModeByNumber"](i)
                            };
                            data["value"] = val;
                        } else {
                            if (total === result["MIDI_CHANNEL_MESSAGES"]["programchange"]) {
                                data["type"] = "programchange";
                                data["value"] = i;
                            } else {
                                if (total === result["MIDI_CHANNEL_MESSAGES"]["channelaftertouch"]) {
                                    data["type"] = "channelaftertouch";
                                    /** @type {number} */
                                    data["value"] = i / 127;
                                } else {
                                    if (total === result["MIDI_CHANNEL_MESSAGES"]["pitchbend"]) {
                                        data["type"] = "pitchbend";
                                        /** @type {number} */
                                        data["value"] = ((val << 7) + i - 8192) / 8192;
                                    } else {
                                        data["type"] = "unknownchannelmessage";
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (this["_userHandlers"]["channel"][data["type"]] && this["_userHandlers"]["channel"][data["type"]][ch]) {
            this["_userHandlers"]["channel"][data["type"]][ch]["forEach"](function (getter) {
                getter(data);
            });
        }
    };
    /**
     * @param {number} mode
     * @return {?}
     */
    Hash["prototype"]["getCcNameByNumber"] = function (mode) {
        /** @type {number} */
        mode = parseInt(mode);
        if (!(mode >= 0 && mode <= 127)) {
            throw new RangeError("The control change number must be between 0 and 127.");
        }
        var id;
        for (id in result["MIDI_CONTROL_CHANGE_MESSAGES"]) {
            if (mode === result["MIDI_CONTROL_CHANGE_MESSAGES"][id]) {
                return id;
            }
        }
        return undefined;
    };
    /**
     * @param {number} mode
     * @return {?}
     */
    Hash["prototype"]["getChannelModeByNumber"] = function (mode) {
        /** @type {number} */
        mode = parseInt(mode);
        if (!(mode >= 120 && status <= 127)) {
            throw new RangeError("The control change number must be between 120 and 127.");
        }
        var id;
        for (id in result["MIDI_CHANNEL_MODE_MESSAGES"]) {
            if (mode === result["MIDI_CHANNEL_MODE_MESSAGES"][id]) {
                return id;
            }
        }
    };
    /**
     * @param {?} docs
     * @return {undefined}
     */
    Hash["prototype"]["_parseSystemEvent"] = function (docs) {
        var _0xe3eex29 = docs["data"][0];
        var data2 = docs["data"][1];
        var event = {
            "target": this,
            "data": docs["data"],
            "timestamp": docs["timeStamp"]
        };
        if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["sysex"]) {
            if (data2 === result["MIDI_SYSTEM_MESSAGES"]["transport"])
                event["type"] = "transport";
            else
                event["type"] = "sysex";
        } else {
            if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["timecode"]) {
                event["type"] = "timecode";
            } else {
                if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["songposition"]) {
                    event["type"] = "songposition";
                } else {
                    if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["songselect"]) {
                        event["type"] = "songselect";
                        event["song"] = docs["data"][1];
                    } else {
                        if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["tuningrequest"]) {
                            event["type"] = "tuningrequest";
                        } else {
                            if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["clock"]) {
                                event["type"] = "clock";
                            } else {
                                if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["start"]) {
                                    event["type"] = "start";
                                } else {
                                    if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["continue"]) {
                                        event["type"] = "continue";
                                    } else {
                                        if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["stop"]) {
                                            event["type"] = "stop";
                                        } else {
                                            if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["activesensing"]) {
                                                event["type"] = "activesensing";
                                            } else {
                                                if (_0xe3eex29 === result["MIDI_SYSTEM_MESSAGES"]["reset"]) {
                                                    event["type"] = "reset";
                                                } else {
                                                    event["type"] = "unknownsystemmessage";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (this["_userHandlers"]["system"][event["type"]]) {
            this["_userHandlers"]["system"][event["type"]]["forEach"](function (proceed) {
                proceed(event);
            });
        }
    };
    /**
     * @param {number} marker
     * @param {(Array|string)} m1
     * @param {?} sValue
     * @return {?}
     */
    Storage["prototype"]["send"] = function (marker, m1, sValue) {
        if (!(marker >= 128 && marker <= 255)) {
            throw new RangeError("The status byte must be an integer between 128 (0x80) and 255 (0xFF).");
        }
        if (!Array["isArray"](m1)) {
            if (parseInt(m1) >= 0 && parseInt(m1) <= 127) {
                /** @type {Array} */
                m1 = [parseInt(m1)];
            } else {
                /** @type {Array} */
                m1 = [];
            }
        }
        /** @type {Array} */
        var encode = [marker];
        m1["forEach"](function (ch) {
            if (ch >= 0 && ch <= 255) {
                encode["push"](ch);
            } else {
                throw new RangeError("The data bytes must be integers between 0 (0x00) and 255 (0xFF).");
            }
        });
        this["_midiOutput"]["send"](encode, parseFloat(sValue) || 0);
        return this;
    };
    /**
     * @param {Text} basis
     * @param {Text} $rootScope
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendSysex"] = function (basis, $rootScope, dataAndEvents) {
        if (!result["sysexEnabled"]) {
            throw new Error("SysEx message support must first be activated.");
        }
        dataAndEvents = dataAndEvents || {};
        basis = []["concat"](basis);
        $rootScope["forEach"](function (dataAndEvents) {
            if (dataAndEvents < 0 || dataAndEvents > 127) {
                throw new RangeError("The data bytes of a SysEx message must be integers between 0 (0x00) and 127 (0x7F).");
            }
        });
        $rootScope = basis["concat"]($rootScope, result["MIDI_SYSTEM_MESSAGES"]["sysexend"]);
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["sysex"], $rootScope, dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {?} deepDataAndEvents
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendTimecodeQuarterFrame"] = function (deepDataAndEvents, dataAndEvents) {
        dataAndEvents = dataAndEvents || {};
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["timecode"], deepDataAndEvents, dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {number} green
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendSongPosition"] = function (green, dataAndEvents) {
        /** @type {number} */
        green = parseInt(green) || 0;
        dataAndEvents = dataAndEvents || {};
        /** @type {number} */
        var _0xe3eex37 = green >> 7 & 127;
        /** @type {number} */
        var palgreen = green & 127;
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["songposition"], [_0xe3eex37, palgreen], dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {number} mode
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendSongSelect"] = function (mode, dataAndEvents) {
        /** @type {number} */
        mode = parseInt(mode);
        dataAndEvents = dataAndEvents || {};
        if (!(mode >= 0 && mode <= 127)) {
            throw new RangeError("The song number must be between 0 and 127.");
        }
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["songselect"], [mode], dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendTuningRequest"] = function (dataAndEvents) {
        dataAndEvents = dataAndEvents || {};
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["tuningrequest"], undefined, dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendClock"] = function (dataAndEvents) {
        dataAndEvents = dataAndEvents || {};
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["clock"], undefined, dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendStart"] = function (dataAndEvents) {
        dataAndEvents = dataAndEvents || {};
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["start"], undefined, dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendContinue"] = function (dataAndEvents) {
        dataAndEvents = dataAndEvents || {};
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["continue"], undefined, dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendStop"] = function (dataAndEvents) {
        dataAndEvents = dataAndEvents || {};
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["stop"], undefined, dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendActiveSensing"] = function (dataAndEvents) {
        dataAndEvents = dataAndEvents || {};
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["activesensing"], undefined, dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendReset"] = function (dataAndEvents) {
        dataAndEvents = dataAndEvents || {};
        this["send"](result["MIDI_SYSTEM_MESSAGES"]["reset"], undefined, dataAndEvents["time"]);
        return this;
    };
    /**
     * @param {?} deepDataAndEvents
     * @param {?} opt_obj2
     * @param {Object} date
     * @return {?}
     */
    Storage["prototype"]["stopNote"] = function (deepDataAndEvents, opt_obj2, date) {
        if (deepDataAndEvents === "all") {
            return this["sendChannelMode"]("allnotesoff", 0, opt_obj2, date);
        }
        /** @type {number} */
        var y = 64;
        date = date || {};
        /** @type {number} */
        date["velocity"] = parseFloat(date["velocity"]);
        if (date["rawVelocity"]) {
            if (!isNaN(date["velocity"]) && (date["velocity"] >= 0 && date["velocity"] <= 127)) {
                y = date["velocity"];
            }
        } else {
            if (!isNaN(date["velocity"]) && (date["velocity"] >= 0 && date["velocity"] <= 1)) {
                /** @type {number} */
                y = date["velocity"] * 127;
            }
        }
        this._convertNoteToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            this._convertChannelToArray(opt_obj2)["forEach"](function (deepDataAndEvents) {
                this["send"]((result["MIDI_CHANNEL_MESSAGES"]["noteoff"] << 4) + (deepDataAndEvents - 1), [dataAndEvents, Math["round"](y)], this._parseTimeParameter(date["time"]));
            } ["bind"](this));
        } ["bind"](this));
        return this;
    };
    /**
     * @param {?} deepDataAndEvents
     * @param {?} opt_obj2
     * @param {Object} values
     * @return {?}
     */
    Storage["prototype"]["playNote"] = function (deepDataAndEvents, opt_obj2, values) {
        /** @type {number} */
        var x = 64;
        values = values || {};
        /** @type {number} */
        values["velocity"] = parseFloat(values["velocity"]);
        if (values["rawVelocity"]) {
            if (!isNaN(values["velocity"]) && (values["velocity"] >= 0 && values["velocity"] <= 127)) {
                x = values["velocity"];
            }
        } else {
            if (!isNaN(values["velocity"]) && (values["velocity"] >= 0 && values["velocity"] <= 1)) {
                /** @type {number} */
                x = values["velocity"] * 127;
            }
        }
        values["time"] = this._parseTimeParameter(values["time"]) || 0;
        this._convertNoteToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            this._convertChannelToArray(opt_obj2)["forEach"](function (deepDataAndEvents) {
                this["send"]((result["MIDI_CHANNEL_MESSAGES"]["noteon"] << 4) + (deepDataAndEvents - 1), [dataAndEvents, Math["round"](x)], values["time"]);
            } ["bind"](this));
        } ["bind"](this));
        if (values["duration"] !== undefined) {
            /** @type {number} */
            var value = 64;
            /** @type {number} */
            values["release"] = parseFloat(values["release"]);
            if (values["rawVelocity"]) {
                if (!isNaN(values["release"]) && (values["release"] >= 0 && values["release"] <= 127)) {
                    value = values["release"];
                }
            } else {
                if (!isNaN(values["release"]) && (values["release"] >= 0 && values["release"] <= 1)) {
                    /** @type {number} */
                    value = values["release"] * 127;
                }
            }
            this._convertNoteToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
                this._convertChannelToArray(opt_obj2)["forEach"](function (deepDataAndEvents) {
                    this["send"]((result["MIDI_CHANNEL_MESSAGES"]["noteoff"] << 4) + (deepDataAndEvents - 1), [dataAndEvents, Math["round"](value)], values["time"] + values["duration"]);
                } ["bind"](this));
            } ["bind"](this));
        }
        return this;
    };
    /**
     * @param {?} deepDataAndEvents
     * @param {number} idx
     * @param {number} version
     * @param {Object} results
     * @return {?}
     */
    Storage["prototype"]["sendKeyAftertouch"] = function (deepDataAndEvents, idx, version, results) {
        var ret = this;
        results = results || {};
        if (idx < 1 || idx > 16) {
            throw new RangeError("The channel must be between 1 and 16.");
        }
        /** @type {number} */
        version = parseFloat(version);
        if (isNaN(version) || (version < 0 || version > 1)) {
            /** @type {number} */
            version = 0.5;
        }
        var hbs = Math["round"](version * 127);
        this._convertNoteToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            ret._convertChannelToArray(idx)["forEach"](function (deepDataAndEvents) {
                ret["send"]((result["MIDI_CHANNEL_MESSAGES"]["keyaftertouch"] << 4) + (deepDataAndEvents - 1), [dataAndEvents, hbs], ret._parseTimeParameter(results["time"]));
            });
        });
        return this;
    };
    /**
     * @param {number} version
     * @param {number} digit
     * @param {?} deepDataAndEvents
     * @param {Object} dataAndEvents
     * @return {?}
     */
    Storage["prototype"]["sendControlChange"] = function (version, digit, deepDataAndEvents, dataAndEvents) {
        dataAndEvents = dataAndEvents || {};
        if (typeof version === "string") {
            version = result["MIDI_CONTROL_CHANGE_MESSAGES"][version];
            if (!version) {
                throw new TypeError("Invalid controller name.");
            }
        } else {
            /** @type {number} */
            version = parseInt(version);
            if (!(version >= 0 && version <= 119)) {
                throw new RangeError("Controller numbers must be between 0 and 119.");
            }
        }
        /** @type {number} */
        digit = parseInt(digit) || 0;
        if (!(digit >= 0 && digit <= 127)) {
            throw new RangeError("Controller value must be between 0 and 127.");
        }
        this._convertChannelToArray(deepDataAndEvents)["forEach"](function (deepDataAndEvents) {
            this["send"]((result["MIDI_CHANNEL_MESSAGES"]["controlchange"] << 4) + (deepDataAndEvents - 1), [version, digit], this._parseTimeParameter(dataAndEvents["time"]));
        } ["bind"](this));
        return this;
    };
    /**
     * @param {Array} args
     * @param {?} capture
     * @param {number} time
     * @return {?}
     */
    Storage["prototype"]["_selectRegisteredParameter"] = function (args, capture, time) {
        var obj = this;
        /** @type {number} */
        args[0] = parseInt(args[0]);
        if (!(args[0] >= 0 && args[0] <= 127)) {
            throw new RangeError("The control65 value must be between 0 and 127");
        }
        /** @type {number} */
        args[1] = parseInt(args[1]);
        if (!(args[1] >= 0 && args[1] <= 127)) {
            throw new RangeError("The control64 value must be between 0 and 127");
        }
        this._convertChannelToArray(capture)["forEach"](function (dataAndEvents) {
            obj["sendControlChange"](101, args[0], capture, {
                time: time
            });
            obj["sendControlChange"](100, args[1], capture, {
                time: time
            });
        });
        return this;
    };
    /**
     * @param {Array} args
     * @param {?} capture
     * @param {number} time
     * @return {?}
     */
    Storage["prototype"]["_selectNonRegisteredParameter"] = function (args, capture, time) {
        var obj = this;
        /** @type {number} */
        args[0] = parseInt(args[0]);
        if (!(args[0] >= 0 && args[0] <= 127)) {
            throw new RangeError("The control63 value must be between 0 and 127");
        }
        /** @type {number} */
        args[1] = parseInt(args[1]);
        if (!(args[1] >= 0 && args[1] <= 127)) {
            throw new RangeError("The control62 value must be between 0 and 127");
        }
        this._convertChannelToArray(capture)["forEach"](function (dataAndEvents) {
            obj["sendControlChange"](99, args[0], capture, {
                time: time
            });
            obj["sendControlChange"](98, args[1], capture, {
                time: time
            });
        });
        return this;
    };
    /**
     * @param {Array} coords
     * @param {?} deepDataAndEvents
     * @param {number} time
     * @return {?}
     */
    Storage["prototype"]["_setCurrentRegisteredParameter"] = function (coords, deepDataAndEvents, time) {
        var ctx = this;
        coords = []["concat"](coords);
        /** @type {number} */
        coords[0] = parseInt(coords[0]);
        if (!(coords[0] >= 0 && coords[0] <= 127)) {
            throw new RangeError("The msb value must be between 0 and 127");
        }
        this._convertChannelToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            ctx["sendControlChange"](6, coords[0], deepDataAndEvents, {
                time: time
            });
        });
        /** @type {number} */
        coords[1] = parseInt(coords[1]);
        if (coords[1] >= 0 && coords[1] <= 127) {
            this._convertChannelToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
                ctx["sendControlChange"](38, coords[1], deepDataAndEvents, {
                    time: time
                });
            });
        }
        return this;
    };
    /**
     * @param {?} capture
     * @param {number} time
     * @return {?}
     */
    Storage["prototype"]["_deselectRegisteredParameter"] = function (capture, time) {
        var obj = this;
        this._convertChannelToArray(capture)["forEach"](function (dataAndEvents) {
            obj["sendControlChange"](101, 127, capture, {
                time: time
            });
            obj["sendControlChange"](100, 127, capture, {
                time: time
            });
        });
        return this;
    };
    /**
     * @param {Text} data
     * @param {?} fn2
     * @param {?} elements
     * @param {Object} options
     * @return {?}
     */
    Storage["prototype"]["setRegisteredParameter"] = function (data, fn2, elements, options) {
        var jQuery = this;
        options = options || {};
        if (!Array["isArray"](data)) {
            if (!result["MIDI_REGISTERED_PARAMETER"][data]) {
                throw new Error("The specified parameter is not available.");
            }
            data = result["MIDI_REGISTERED_PARAMETER"][data];
        }
        this._convertChannelToArray(elements)["forEach"](function (dataAndEvents) {
            jQuery._selectRegisteredParameter(data, elements, options["time"]);
            jQuery._setCurrentRegisteredParameter(fn2, elements, options["time"]);
            jQuery._deselectRegisteredParameter(elements, options["time"]);
        });
        return this;
    };
    /**
     * @param {Array} fn2
     * @param {Text} qualifier
     * @param {?} elements
     * @param {Object} options
     * @return {?}
     */
    Storage["prototype"]["setNonRegisteredParameter"] = function (fn2, qualifier, elements, options) {
        var jQuery = this;
        options = options || {};
        if (!(fn2[0] >= 0 && fn2[0] <= 127) || !(fn2[1] >= 0 && fn2[1] <= 127)) {
            throw new Error("Position 0 and 1 of the 2-position parameter array must both be between 0 and 127.");
        }
        qualifier = []["concat"](qualifier);
        this._convertChannelToArray(elements)["forEach"](function (dataAndEvents) {
            jQuery._selectNonRegisteredParameter(fn2, elements, options["time"]);
            jQuery._setCurrentRegisteredParameter(qualifier, elements, options["time"]);
            jQuery._deselectRegisteredParameter(elements, options["time"]);
        });
        return this;
    };
    /**
     * @param {Text} data
     * @param {?} elements
     * @param {Object} options
     * @return {?}
     */
    Storage["prototype"]["incrementRegisteredParameter"] = function (data, elements, options) {
        var jQuery = this;
        options = options || {};
        if (!Array["isArray"](data)) {
            if (!result["MIDI_REGISTERED_PARAMETER"][data]) {
                throw new Error("The specified parameter is not available.");
            }
            data = result["MIDI_REGISTERED_PARAMETER"][data];
        }
        this._convertChannelToArray(elements)["forEach"](function (dataAndEvents) {
            jQuery._selectRegisteredParameter(data, elements, options["time"]);
            jQuery["sendControlChange"](96, 0, elements, {
                time: options["time"]
            });
            jQuery._deselectRegisteredParameter(elements, options["time"]);
        });
        return this;
    };
    /**
     * @param {Text} data
     * @param {?} deepDataAndEvents
     * @param {Object} time
     * @return {?}
     */
    Storage["prototype"]["decrementRegisteredParameter"] = function (data, deepDataAndEvents, time) {
        time = time || {};
        if (!Array["isArray"](data)) {
            if (!result["MIDI_REGISTERED_PARAMETER"][data]) {
                throw new TypeError("The specified parameter is not available.");
            }
            data = result["MIDI_REGISTERED_PARAMETER"][data];
        }
        this._convertChannelToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            this._selectRegisteredParameter(data, deepDataAndEvents, time["time"]);
            this["sendControlChange"](97, 0, deepDataAndEvents, {
                time: time["time"]
            });
            this._deselectRegisteredParameter(deepDataAndEvents, time["time"]);
        } ["bind"](this));
        return this;
    };
    /**
     * @param {number} digit
     * @param {number} v
     * @param {?} capture
     * @param {Object} time
     * @return {?}
     */
    Storage["prototype"]["setPitchBendRange"] = function (digit, v, capture, time) {
        var obj = this;
        time = time || {};
        /** @type {number} */
        digit = parseInt(digit) || 0;
        if (!(digit >= 0 && digit <= 127)) {
            throw new RangeError("The semitones value must be between 0 and 127");
        }
        /** @type {number} */
        v = parseInt(v) || 0;
        if (!(v >= 0 && v <= 127)) {
            throw new RangeError("The cents value must be between 0 and 127");
        }
        this._convertChannelToArray(capture)["forEach"](function (dataAndEvents) {
            obj["setRegisteredParameter"]("pitchbendrange", [digit, v], capture, {
                time: time["time"]
            });
        });
        return this;
    };
    /**
     * @param {number} digit
     * @param {number} v
     * @param {?} capture
     * @param {Object} time
     * @return {?}
     */
    Storage["prototype"]["setModulationRange"] = function (digit, v, capture, time) {
        var obj = this;
        time = time || {};
        /** @type {number} */
        digit = parseInt(digit) || 0;
        if (!(digit >= 0 && digit <= 127)) {
            throw new RangeError("The semitones value must be between 0 and 127");
        }
        /** @type {number} */
        v = parseInt(v) || 0;
        if (!(v >= 0 && v <= 127)) {
            throw new RangeError("The cents value must be between 0 and 127");
        }
        this._convertChannelToArray(capture)["forEach"](function (dataAndEvents) {
            obj["setRegisteredParameter"]("modulationrange", [digit, v], capture, {
                time: time["time"]
            });
        });
        return this;
    };
    /**
     * @param {number} x
     * @param {?} deepDataAndEvents
     * @param {Object} time
     * @return {?}
     */
    Storage["prototype"]["setMasterTuning"] = function (x, deepDataAndEvents, time) {
        var collection = this;
        time = time || {};
        /** @type {number} */
        x = parseFloat(x) || 0;
        if (x <= -65 || x >= 64) {
            throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");
        }
        /** @type {number} */
        var options = parseInt(x) + 64;
        /** @type {number} */
        var a = x - parseInt(x);
        a = Math["round"]((a + 1) / 2 * 16383);
        /** @type {number} */
        var _0xe3eex37 = a >> 7 & 127;
        /** @type {number} */
        var hiBitSet = a & 127;
        this._convertChannelToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            collection["setRegisteredParameter"]("channelcoarsetuning", options, deepDataAndEvents, {
                time: time["time"]
            });
            collection["setRegisteredParameter"]("channelfinetuning", [_0xe3eex37, hiBitSet], deepDataAndEvents, {
                time: time["time"]
            });
        });
        return this;
    };
    /**
     * @param {number} v
     * @param {?} easing
     * @param {Object} time
     * @return {?}
     */
    Storage["prototype"]["setTuningProgram"] = function (v, easing, time) {
        var el = this;
        time = time || {};
        /** @type {number} */
        v = parseInt(v) || 0;
        if (!(v >= 0 && v <= 127)) {
            throw new RangeError("The program value must be between 0 and 127");
        }
        this._convertChannelToArray(easing)["forEach"](function (dataAndEvents) {
            el["setRegisteredParameter"]("tuningprogram", v, easing, {
                time: time["time"]
            });
        });
        return this;
    };
    /**
     * @param {number} v
     * @param {?} easing
     * @param {Object} time
     * @return {?}
     */
    Storage["prototype"]["setTuningBank"] = function (v, easing, time) {
        var el = this;
        time = time || {};
        /** @type {number} */
        v = parseInt(v) || 0;
        if (!(v >= 0 && v <= 127)) {
            throw new RangeError("The bank value must be between 0 and 127");
        }
        this._convertChannelToArray(easing)["forEach"](function (dataAndEvents) {
            el["setRegisteredParameter"]("tuningbank", v, easing, {
                time: time["time"]
            });
        });
        return this;
    };
    /**
     * @param {number} version
     * @param {number} mode
     * @param {?} deepDataAndEvents
     * @param {Object} results
     * @return {?}
     */
    Storage["prototype"]["sendChannelMode"] = function (version, mode, deepDataAndEvents, results) {
        var ret = this;
        results = results || {};
        if (typeof version === "string") {
            version = result["MIDI_CHANNEL_MODE_MESSAGES"][version];
            if (!version) {
                throw new TypeError("Invalid channel mode message name.");
            }
        } else {
            /** @type {number} */
            version = parseInt(version);
            if (!(version >= 120 && version <= 127)) {
                throw new RangeError("Channel mode numerical identifiers must be between 120 and 127.");
            }
        }
        /** @type {number} */
        mode = parseInt(mode);
        if (isNaN(mode) || (mode < 0 || mode > 127)) {
            throw new RangeError("Value must be integers between 0 and 127.");
        }
        this._convertChannelToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            ret["send"]((result["MIDI_CHANNEL_MESSAGES"]["channelmode"] << 4) + (dataAndEvents - 1), [version, mode], ret._parseTimeParameter(results["time"]));
        });
        return this;
    };
    /**
     * @param {number} mode
     * @param {?} deepDataAndEvents
     * @param {Object} results
     * @return {?}
     */
    Storage["prototype"]["sendProgramChange"] = function (mode, deepDataAndEvents, results) {
        var ret = this;
        results = results || {};
        /** @type {number} */
        mode = parseInt(mode);
        if (isNaN(mode) || (mode < 0 || mode > 127)) {
            throw new RangeError("Program numbers must be between 0 and 127.");
        }
        this._convertChannelToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            ret["send"]((result["MIDI_CHANNEL_MESSAGES"]["programchange"] << 4) + (dataAndEvents - 1), [mode], ret._parseTimeParameter(results["time"]));
        });
        return this;
    };
    /**
     * @param {number} version
     * @param {?} deepDataAndEvents
     * @param {Object} results
     * @return {?}
     */
    Storage["prototype"]["sendChannelAftertouch"] = function (version, deepDataAndEvents, results) {
        var ret = this;
        results = results || {};
        /** @type {number} */
        version = parseFloat(version);
        if (isNaN(version) || (version < 0 || version > 1)) {
            /** @type {number} */
            version = 0.5;
        }
        var _0xe3eex3d = Math["round"](version * 127);
        this._convertChannelToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            ret["send"]((result["MIDI_CHANNEL_MESSAGES"]["channelaftertouch"] << 4) + (dataAndEvents - 1), [_0xe3eex3d], ret._parseTimeParameter(results["time"]));
        });
        return this;
    };
    /**
     * @param {number} version
     * @param {?} deepDataAndEvents
     * @param {Object} results
     * @return {?}
     */
    Storage["prototype"]["sendPitchBend"] = function (version, deepDataAndEvents, results) {
        var ret = this;
        results = results || {};
        /** @type {number} */
        version = parseFloat(version);
        if (isNaN(version) || (version < -1 || version > 1)) {
            throw new RangeError("Pitch bend value must be between -1 and 1.");
        }
        var bits = Math["round"]((version + 1) / 2 * 16383);
        /** @type {number} */
        var hbs = bits >> 7 & 127;
        /** @type {number} */
        var secondHextet = bits & 127;
        this._convertChannelToArray(deepDataAndEvents)["forEach"](function (dataAndEvents) {
            ret["send"]((result["MIDI_CHANNEL_MESSAGES"]["pitchbend"] << 4) + (dataAndEvents - 1), [secondHextet, hbs], ret._parseTimeParameter(results["time"]));
        });
        return this;
    };
    /**
     * @param {boolean} field
     * @return {?}
     */
    Storage["prototype"]["_parseTimeParameter"] = function (field) {
        var value;
        if (field === undefined) {
            return 0;
        }
        if (field && (field["substring"] && field["substring"](0, 1) === "+")) {
            /** @type {number} */
            value = parseFloat(field);
            if (!value) {
                throw new TypeError("Invalid relative time format.");
            }
            return value + result["time"];
        } else {
            /** @type {number} */
            value = parseFloat(field);
            if (!value) {
                throw new TypeError("Invalid absolute time format.");
            }
            return value;
        }
    };
    /**
     * @param {(Array|number)} data
     * @return {?}
     */
    Storage["prototype"]["_convertNoteToArray"] = function (data) {
        /** @type {Array} */
        var inserters = [];
        if (!Array["isArray"](data)) {
            /** @type {Array} */
            data = [data];
        }
        data["forEach"](function (text) {
            inserters["push"](result["guessNoteNumber"](text));
        });
        return inserters;
    };
    /**
     * @param {Array} data
     * @return {?}
     */
    Storage["prototype"]["_convertChannelToArray"] = function (data) {
        if (data === "all" || data === undefined) {
            /** @type {Array} */
            data = ["all"];
        }
        if (!Array["isArray"](data)) {
            /** @type {Array} */
            data = [data];
        }
        if (data["indexOf"]("all") > -1) {
            /** @type {Array} */
            data = [];
            /** @type {number} */
            var dataPointer = 1;
            for (; dataPointer <= 16; dataPointer++) {
                data["push"](dataPointer);
            }
        }
        data["forEach"](function (dataAndEvents) {
            if (!(dataAndEvents >= 1 && dataAndEvents <= 16)) {
                throw new RangeError("MIDI channels must be between 1 and 16.");
            }
        });
        return data;
    };
    /**
     * @param {?} dataAndEvents
     * @return {undefined}
     */
    Storage["prototype"]["_onMidiMessage"] = function (dataAndEvents) {};
    if (typeof define === "function" && typeof define["amd"] === "object") {
        define([], function () {
            return result;
        });
    } else {
        if (typeof module !== "undefined" && module["exports"]) {
            module["exports"] = result;
        } else {
            if (!dataAndEvents["WebMidi"]) {
                dataAndEvents["WebMidi"] = result;
            }
        }
    }
})(this);
(function (dataAndEvents) {
    "use strict";
    dataAndEvents["factory"]("activity", ["broadcaster", "errors", function (ignoreMethodDoesntExist, dataAndEvents) {
        /**
         * @param {?} dataAndEvents
         * @param {(Array|string)} deepDataAndEvents
         * @return {undefined}
         */
        function clone(dataAndEvents, deepDataAndEvents) {
            /** @type {Date} */
            var against = new Date;
            var _0xe3eex40 = against["getHours"]() + ":" + against["getMinutes"]() + ":" + against["getSeconds"]();
            if (dataAndEvents) {
                deepDataAndEvents = [dataAndEvents]["concat"](deepDataAndEvents);
            }
            entries["splice"](0, 0, _0xe3eex40 + "-" + deepDataAndEvents["join"](" "));
            ignoreMethodDoesntExist["send"]("activity.change");
        }
        /**
         * @param {Array} position
         * @return {undefined}
         */
        function ccHandler(position) {
            clone("CC ", [position[1],
                ["val"],
                [position[2]],
                ["CH"], position[0] - 175
            ]);
        }
        /**
         * @param {Array} failing_message
         * @return {undefined}
         */
        function report(failing_message) {
            clone("Program Change", [failing_message[1],
                ["CH"], failing_message[0] - 191
            ]);
        }
        /**
         * @param {Array} deepDataAndEvents
         * @return {undefined}
         */
        function noteOnHandler(deepDataAndEvents) {
            clone("Note On", [deepDataAndEvents[1],
                ["vel"],
                [deepDataAndEvents[2]],
                ["CH"], deepDataAndEvents[0] - 143
            ]);
        }
        /**
         * @param {Array} deepDataAndEvents
         * @return {undefined}
         */
        function noteOffHandler(deepDataAndEvents) {
            if (deepDataAndEvents[0] >= 144) {
                noteOnHandler(deepDataAndEvents);
            } else {
                if (deepDataAndEvents[0] >= 128) {
                    clone("Note Off", [deepDataAndEvents[1],
                        ["vel"],
                        [deepDataAndEvents[2]],
                        ["CH"], deepDataAndEvents[0] - 127
                    ]);
                }
            }
        }
        /**
         * @param {Array} deepDataAndEvents
         * @return {undefined}
         */
        function transportHandler(deepDataAndEvents) {
            var control;
            if (deepDataAndEvents[1] == 127) {
                if (deepDataAndEvents[4] == 0x01) {
                    clone("MMC Stop", [
                        ["CH"], deepDataAndEvents[2]
                    ]);
                } else if (deepDataAndEvents[4] == 0x02) {
                    clone("MMC Play", [
                        ["CH"], deepDataAndEvents[2]
                    ]);
                } else if (deepDataAndEvents[4] == 0x09) {
                    clone("MMC Pause", [
                        ["CH"], deepDataAndEvents[2]
                    ]);
                } else if (deepDataAndEvents[4] == 0x06) {
                    clone("MMC Record On", [
                        ["CH"], deepDataAndEvents[2]
                    ]);
                } else if (deepDataAndEvents[4] == 0x07) {
                    clone("MMC Record Off", [
                        ["CH"], deepDataAndEvents[2]
                    ]);
                }
            }
        }
        /**
         * @return {undefined}
         */
        function clear() {
            /** @type {Array} */
            entries = [];
            ignoreMethodDoesntExist["send"]("activity.change");
        }
        /**
         * @return {?}
         */
        function get() {
            return entries;
        }
        /** @type {Array} */
        var entries = [];
        return {
            /** @type {function (?, (Array|string)): undefined} */
            add: clone,
            /** @type {function (): undefined} */
            clear: clear,
            /** @type {function (): ?} */
            get: get,
            /** @type {function (Array): undefined} */
            controlChange: ccHandler,
            /** @type {function (Array): undefined} */
            programChange: report,
            /** @type {function (Array): undefined} */
            noteOn: noteOnHandler,
            /** @type {function (Array): undefined} */
            noteOff: noteOffHandler,
            /** @type {function (Array): undefined} */
            mmc: transportHandler
        };
    }]);
    dataAndEvents["controller"]("activityCtrl", ["$scope", "activity", function (first, dataAndEvents) {
        /**
         * @return {undefined}
         */
        function elem() {
            /** @type {boolean} */
            first["displayActivity"] = !first["displayActivity"];
        }
        /**
         * @return {undefined}
         */
        function ready() {
            first["activities"] = dataAndEvents["get"]();
            if (!first["$$phase"]) {
                first.$apply();
            }
        }
        /**
         * @return {undefined}
         */
        function completed() {
            dataAndEvents["clear"]();
            ready();
        }
        /** @type {boolean} */
        first["displayActivity"] = true;
        /** @type {function (): undefined} */
        first["clear"] = completed;
        /** @type {function (): undefined} */
        first["toggleDisplayActivity"] = elem;
        first.$on("activity.change", function () {
            ready();
        });
        ready();
    }]);
})(angular["module"]("app"));
(function (dataAndEvents) {
    "use strict";
    dataAndEvents["factory"]("api", ["broadcaster", "$q", "config", "activity", "errors", function ($http, dataAndEvents, data, deepDataAndEvents, ignoreMethodDoesntExist) {
        /**
         * @param {?} serviceName
         * @param {?} payload
         * @return {?}
         */
        function send(serviceName, payload) {
            var _0xe3eex5e = dataAndEvents["defer"]();
            /** @type {number} */
            var unlock = 4;
            /** @type {boolean} */
            var isTrueSet = payload === "backup";
            /** @type {Array} */
            var node = [];
            /**
             * @param {?} dataAndEvents
             * @return {undefined}
             */
            var clone = function (dataAndEvents) {
                /**
                 * @param {Array} dataAndEvents
                 * @return {undefined}
                 */
                var clone = function (dataAndEvents) {
                    events["input"]["removeListener"]("sysex", "all", clone);
                    _0xe3eex5e["resolve"](dataAndEvents);
                };
                var cache = dataAndEvents["data"][unlock];
                if (cache > 1) {
                    deepDataAndEvents["add"]("ERROR", ignoreMethodDoesntExist["getErrorCode"](cache));
                    _0xe3eex5e["reject"]({
                        errNumber: cache
                    });
                }
                if (isTrueSet) {
                    if (cache === 1) {
                        clone(node);
                    } else {
                        node["push"](dataAndEvents["data"]);
                    }
                } else {
                    clone(dataAndEvents["data"]);
                }
            };
            events["input"]["addListener"]("sysex", "all", clone);
            events["output"]["sendSysex"](r20, serviceName);
            return _0xe3eex5e["promise"];
        }
        /**
         * @return {?}
         */
        function connect() {
            var _0xe3eex5e = dataAndEvents["defer"]();
            recurse()["then"](function (res) {
                var event = data["midi"];
                events = res;
                if (events["outputs"]["length"] === 0 || events["inputs"]["length"] === 0) {
                    _0xe3eex5e["reject"]("No midi i/o found!");
                } else {}
                events["input"] = events["getInputByName"](event);
                events["output"] = events["getOutputByName"](event);
                events["input"]["addListener"]("noteoff", "all", clone);
                events["input"]["addListener"]("noteon", "all", cloneNode);
                events["input"]["addListener"]("programchange", "all", restoreScript);
                events["input"]["addListener"]("controlchange", "all", report);
                events["input"]["addListener"]("transport", "all", mmcData);
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                events["interface"]["onstatechange"] = function (data) {
                    if (data["port"]["state"] === "disconnected") {
                        $http["send"]("disconnected", data);
                    } else {
                        if (data["port"]["state"] === "connected") {
                            $http["send"]("connected", data);
                        }
                    }
                };
                events["input"]["addListener"]("sysex", "all", objectType);
                _0xe3eex5e["resolve"]();
            });
            return _0xe3eex5e["promise"];
        }
        /**
         * @return {?}
         */
        function recurse() {
            var collection = dataAndEvents["defer"]();
            WebMidi["enable"](function (resp) {
                if (resp) {
                    collection["reject"](resp);
                } else {
                    collection["resolve"](WebMidi);
                }
            }, true);
            return collection["promise"];
        }
        /** @type {Array} */
        var r20 = [0, 83, 67];
        var events = {};
        /**
         * @param {?} obj
         * @return {undefined}
         */
        var objectType = function (obj) {
            if (obj["data"][6] === 73) {
                $http["send"]("sysex.componentInfo", {
                    data: obj["data"],
                    block: obj["data"][7],
                    idx: obj["data"][8]
                });
            } else {
                $http["send"]("sysex", obj);
            }
        };
        /**
         * @param {?} elem
         * @return {undefined}
         */
        var restoreScript = function (elem) {
            deepDataAndEvents["programChange"](elem["data"]);
        };
        /**
         * @param {?} failing_message
         * @return {undefined}
         */
        var report = function (failing_message) {
            deepDataAndEvents["controlChange"](failing_message["data"]);
        };
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        var cloneNode = function (dataAndEvents) {
            deepDataAndEvents["noteOn"](dataAndEvents["data"]);
        };
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        var clone = function (dataAndEvents) {
            deepDataAndEvents["noteOff"](dataAndEvents["data"]);
        };
        /**
         * @param {?} dataAndEvents
         * @return {undefined}
         */
        var mmcData = function (dataAndEvents) {
            deepDataAndEvents["mmc"](dataAndEvents["data"]);
        };
        return {
            /** @type {function (): ?} */
            connect: connect,
            /** @type {function (?, ?): ?} */
            send: send
        };
    }]);
})(angular["module"]("app"));
(function (dataAndEvents) {
    "use strict";
    dataAndEvents["factory"]("repository", ["$q", "api", "config", "activity", "meta", function (dataAndEvents, $http, deepDataAndEvents, exports, ca) {
        /**
         * @param {?} val
         * @param {?} el
         * @param {?} v
         * @return {undefined}
         */
        function setter(val, el, v) {
            var _0xe3eex6e = val["sequence"]["filter"](function (arr) {
                return arr["key"] === el;
            })[0];
            var r20 = cache["set"]["concat"](_0xe3eex6e["p"]);
            r20["push"](+v);
            $http["send"](r20)["then"](function (dataAndEvents) {
                if (deepDataAndEvents["debug"]) {
                    exports["add"]("SET", r20);
                }
            });
        }
        /**
         * @return {?}
         */
        function setModel() {
            var element = dataAndEvents["defer"]();
            var c = ca["backup"];
            set(c, "backup")["then"](function (args) {
                element["resolve"](args["res"]);
            });
            return element["promise"];
        }
        /**
         * @param {?} eachfn
         * @return {?}
         */
        function _concat(eachfn) {
            var _0xe3eex5e = dataAndEvents["defer"]();
            var radio = eachfn["length"];
            /** @type {number} */
            var value = 0;
            eachfn["forEach"](function (json) {
                /** @type {Array} */
                var data = json;
                if (!(data instanceof Uint8Array || data instanceof Array)) {
                    data = Object["keys"](json)["map"](function (newName) {
                        return json[newName];
                    });
                }
                $http["send"](data["slice"](4, data["length"] - 1))["then"](function (dataAndEvents) {
                    value++;
                    if (value === radio) {
                        _0xe3eex5e["resolve"]();
                    }
                });
            });
            return _0xe3eex5e["promise"];
        }
        /**
         * @param {?} obj
         * @param {(Object|boolean|number|string)} subKey
         * @return {?}
         */
        function getter(obj, subKey) {
            var element = dataAndEvents["defer"]();
            set(obj, subKey || "get")["then"](function (args) {
                element["resolve"](args["obj"]);
            });
            return element["promise"];
        }
        /**
         * @param {?} s
         * @param {?} data
         * @return {?}
         */
        function set(s, data) {
            var _0xe3eex5e = dataAndEvents["defer"]();
            var obj = {};
            /** @type {Array} */
            var self = [];
            var _0xe3eex79 = angular["copy"](s["sequence"]);
            var i = s["idx"];
            /**
             * @param {?} items
             * @return {undefined}
             */
            var insert = function (items) {
                var r20 = cache[data]["concat"](items["p"]);
                $http["send"](r20, data)["then"](function (args) {
                    if (items["key"]) {
                        if (items["type"] === "boolean") {
                            /** @type {boolean} */
                            obj[items["key"]] = Boolean(args[i]);
                        } else {
                            if (items["type"] === "number") {
                                obj[items["key"]] = args[i];
                            }
                        }
                    }
                    if (args[0] instanceof Array || args[0] instanceof Uint8Array) {
                        args["forEach"](function (className) {
                            self["push"](className);
                        });
                    } else {
                        self["push"](args);
                    }
                    if (_0xe3eex79["length"] > 0) {
                        insert(_0xe3eex79["shift"]());
                    } else {
                        _0xe3eex5e["resolve"]({
                            obj: obj,
                            res: self
                        });
                    }
                    if (deepDataAndEvents["debug"]) {
                        exports["add"]("GET", r20);
                        exports["add"]("RES", args);
                    }
                });
            };
            insert(_0xe3eex79["shift"]());
            return _0xe3eex5e["promise"];
        }
        /**
         * @param {number} res
         * @return {?}
         */
        function onSuccess(res) {
            var collection = dataAndEvents["defer"]();
            var suiteView = {
                sequence: [{
                    key: "count",
                    type: "number",
                    p: [77]
                }],
                idx: res
            };
            getter(suiteView, "count")["then"](function (h) {
                /** @type {Array} */
                var resp = [];
                /** @type {number} */
                var j = 0;
                for (; j < h["count"]; ++j) {
                    resp["push"]({
                        idx: j
                    });
                }
                collection["resolve"](resp);
            });
            return collection["promise"];
        }
        var cache = {
            get: [0, 0, 0, 0],
            set: [0, 0, 1, 0],
            count: [0, 0],
            backup: [0]
        };
        return {
            /** @type {function (?, (Object|boolean|number|string)): ?} */
            get: getter,
            /** @type {function (number): ?} */
            getCollection: onSuccess,
            /** @type {function (?, ?, ?): undefined} */
            set: setter,
            /** @type {function (): ?} */
            backup: setModel,
            /** @type {function (?): ?} */
            restore: _concat
        };
    }]);
})(angular["module"]("app"));
(function (dataAndEvents) {
    "use strict";
    dataAndEvents["factory"]("system", ["$q", "api", "activity", function (dataAndEvents, deepDataAndEvents, ignoreMethodDoesntExist) {
        /**
         * @return {?}
         */
        function connect() {
            var _0xe3eex5e = dataAndEvents["defer"]();
            deepDataAndEvents["connect"]()["then"](function () {
                handshake()["then"](function (dataAndEvents) {
                    _0xe3eex5e["resolve"]();
                });
            });
            return _0xe3eex5e["promise"];
        }
        /**
         * @return {?}
         */
        function handshake() {
            var collection = dataAndEvents["defer"]();
            deepDataAndEvents["send"]([0, 0, 1])["then"](function (resp) {
                collection["resolve"](resp);
            });
            return collection["promise"];
        }
        /**
         * @return {?}
         */
        function getFirmwareVersion() {
            var collection = dataAndEvents["defer"]();
            deepDataAndEvents["send"]([0, 0, 86])["then"](function (resp) {
                collection["resolve"](resp);
            });
            return collection["promise"];
        }
        /**
         * @return {?}
         */
        function getHardwareVersion() {
            var collection = dataAndEvents["defer"]();
            deepDataAndEvents["send"]([0, 0, 66])["then"](function (resp) {
                collection["resolve"](resp);
            });
            return collection["promise"];
        }

        function getVersion() {
            var collection = dataAndEvents["defer"]();
            deepDataAndEvents["send"]([0, 0, 67])["then"](function (resp) {
                collection["resolve"](resp);
            });
            return collection["promise"];
        }
        /**
         * @return {undefined}
         */
        function nsp() {}
        /**
         * @return {undefined}
         */
        function options() {
            deepDataAndEvents["send"]([0, 0, 127]);
        }
        /**
         * @return {undefined}
         */
        function bootloaderMode() {
            deepDataAndEvents["send"]([0, 0, 85]);
        }
        /**
         * @return {undefined}
         */
        function factoryReset() {
            deepDataAndEvents["send"]([0, 0, 68]);
        }
        return {
            /** @type {function (): ?} */
            connect: connect,
            /** @type {function (): ?} */
            firmwareVersion: getFirmwareVersion,
            /** @type {function (): ?} */
            hardwareVersion: getHardwareVersion,
            /** @type {function (): ?} */
            version: getVersion,
            /** @type {function (): undefined} */
            nsp: nsp,
            /** @type {function (): undefined} */
            reboot: options,
            /** @type {function (): undefined} */
            bootloaderMode: bootloaderMode,
            /** @type {function (): undefined} */
            factoryReset: factoryReset,
            /** @type {function (): ?} */
            handshake: handshake
        };
    }]);
})(angular["module"]("app"));
(function (dataAndEvents) {
    "use strict";
    dataAndEvents["factory"]("broadcaster", ["$rootScope", function ($rootScope) {
        return {
            /**
             * @param {?} event
             * @param {?} data
             * @return {undefined}
             */
            send: function (event, data) {
                $rootScope.$broadcast(event, data);
            }
        };
    }]);
})(angular["module"]("app"));
(function (dataAndEvents) {
    "use strict";
    dataAndEvents["factory"]("errors", function () {
        /**
         * @param {?} dataAndEvents
         * @return {?}
         */
        function clone(dataAndEvents) {
            var event;
            for (event in events) {
                if (events["hasOwnProperty"](event)) {
                    if (events[event] === dataAndEvents) {
                        return event;
                    }
                }
            }
        }
        var events = {
            STATUS: 2,
            HANDSHAKE: 3,
            WISH: 4,
            AMMOUNT: 5,
            BLOCK: 6,
            SECTION: 7,
            PART: 8,
            INDEX: 9,
            NEW_VALUE: 10,
            MSG_LENGTH: 11,
            WRITE: 12,
            NOT_SUPPORTED: 13,
            READ: 14
        };
        return {
            /** @type {function (?): ?} */
            getErrorCode: clone
        };
    });
})(angular["module"]("app"));
(function (dataAndEvents) {
    "use strict";
    dataAndEvents["factory"]("meta", function () {
        return {
            global: {
                sequence: [{
                    key: "standardNoteOff",
                    type: "boolean",
                    p: [0, 0, 0]
                }, {
                    key: "runningStatus",
                    type: "boolean",
                    p: [0, 0, 1]
                }, {
                    key: "thruState",
                    type: "boolean",
                    p: [0, 0, 2]
                }, {
                    key: "dinMIDIstate",
                    type: "boolean",
                    p: [0, 0, 3]
                }, {
                    key: "thruInterface",
                    type: "number",
                    p: [0, 1, 0]
                }, {
                    key: "activePreset",
                    type: "number",
                    p: [0, 2, 0]
                }, {
                    key: "preservePreset",
                    type: "boolean",
                    p: [0, 2, 1]
                }],
                idx: 6
            },
            button: {
                sequence: [{
                    key: "type",
                    type: "number",
                    p: [1, 0]
                }, {
                    key: "midiMessage",
                    type: "number",
                    p: [1, 1]
                }, {
                    key: "midiId",
                    type: "number",
                    p: [1, 2]
                }, {
                    key: "midiVelocity",
                    type: "number",
                    p: [1, 3]
                }, {
                    key: "midiChannel",
                    type: "number",
                    p: [1, 4]
                }],
                idx: 6
            },
            encoder: {
                sequence: [{
                    key: "enabled",
                    type: "boolean",
                    p: [2, 0]
                }, {
                    key: "invertState",
                    type: "boolean",
                    p: [2, 1]
                }, {
                    key: "encodingMode",
                    type: "number",
                    p: [2, 2]
                }, {
                    key: "midiId_lsb",
                    type: "number",
                    p: [2, 3]
                }, {
                    key: "midiChannel",
                    type: "number",
                    p: [2, 4]
                }, {
                    key: "pulsesPerStep",
                    type: "number",
                    p: [2, 5]
                }, {
                    key: "acceleration",
                    type: "number",
                    p: [2, 6]
                }, {
                    key: "midiId_msb",
                    type: "number",
                    p: [2, 7]
                }, {
                    key: "remoteCCsync",
                    type: "boolean",
                    p: [2, 8]
                }],
                idx: 6
            },
            analog: {
                sequence: [{
                    key: "enabled",
                    type: "boolean",
                    p: [3, 0]
                }, {
                    key: "invertState",
                    type: "boolean",
                    p: [3, 1]
                }, {
                    key: "type",
                    type: "number",
                    p: [3, 2]
                }, {
                    key: "midiId_lsb",
                    type: "number",
                    p: [3, 3]
                }, {
                    key: "midiId_msb",
                    type: "number",
                    p: [3, 4]
                }, {
                    key: "lowerCC_lsb",
                    type: "number",
                    p: [3, 5]
                }, {
                    key: "lowerCC_msb",
                    type: "number",
                    p: [3, 6]
                }, {
                    key: "upperCC_lsb",
                    type: "number",
                    p: [3, 7]
                }, {
                    key: "upperCC_msb",
                    type: "number",
                    p: [3, 8]
                }, {
                    key: "midiChannel",
                    type: "number",
                    p: [3, 9]
                }],
                idx: 6
            },
            led: {
                sequence: [{
                    key: "ledColorTesting",
                    type: "number",
                    p: [4, 0]
                }, {
                    key: "ledBlinkTesting",
                    type: "boolean",
                    p: [4, 1]
                }, {
                    key: "activationNote",
                    type: "number",
                    p: [4, 3]
                }, {
                    key: "rgbEnable",
                    type: "boolean",
                    p: [4, 4]
                }, {
                    key: "ledControlType",
                    type: "number",
                    p: [4, 5]
                }, {
                    key: "singleLEDVelocityValue",
                    type: "number",
                    p: [4, 6]
                }, {
                    key: "midiChannel",
                    type: "number",
                    p: [4, 7]
                }],
                idx: 6
            },
            display: {
                sequence: [{
                    key: "displayEnabled",
                    type: "boolean",
                    p: [5, 0, 0]
                }, {
                    key: "displayWelcomeMsg",
                    type: "boolean",
                    p: [5, 0, 1]
                }, {
                    key: "displayVInfoMsg",
                    type: "boolean",
                    p: [5, 0, 2]
                }, {
                    key: "alternateNoteDisplay",
                    type: "boolean",
                    p: [5, 0, 3]
                }, {
                    key: "displayController",
                    type: "number",
                    p: [5, 1, 0]
                },{
                    key: "displayResolution",
                    type: "number",
                    p: [5, 1, 1]
                }, {
                    key: "retentionTime",
                    type: "number",
                    p: [5, 1, 2]
                }, {
                    key: "octaveNormalization",
                    type: "boolean",
                    p: [5, 1, 3]
                }],
                idx: 6
            },
            ledGlobal: {
                sequence: [{
                    key: "blinkViaMIDIclock",
                    type: "boolean",
                    p: [4, 2, 0]
                }, {
                    key: "fadeTime",
                    type: "number",
                    p: [4, 2, 1]
                }, {
                    key: "startupRoutine",
                    type: "boolean",
                    p: [4, 2, 2]
                }],
                idx: 6
            },
            backup: {
                sequence: [{
                    key: false,
                    p: [126, 2, 1, 0, 0]
                }, {
                    key: false,
                    p: [126, 2, 1, 0, 1]
                }, {
                    key: false,
                    p: [126, 2, 1, 0, 2]
                }, {
                    key: false,
                    p: [126, 2, 1, 1, 0]
                }, {
                    key: false,
                    p: [126, 2, 1, 1, 1]
                }, {
                    key: false,
                    p: [126, 2, 1, 1, 2]
                }, {
                    key: false,
                    p: [126, 2, 1, 1, 3]
                }, {
                    key: false,
                    p: [126, 2, 1, 1, 4]
                }, {
                    key: false,
                    p: [126, 2, 1, 2, 0]
                }, {
                    key: false,
                    p: [126, 2, 1, 2, 1]
                }, {
                    key: false,
                    p: [126, 2, 1, 2, 2]
                }, {
                    key: false,
                    p: [126, 2, 1, 2, 3]
                }, {
                    key: false,
                    p: [126, 2, 1, 2, 4]
                }, {
                    key: false,
                    p: [126, 2, 1, 2, 5]
                }, {
                    key: false,
                    p: [126, 2, 1, 2, 6]
                }, {
                    key: false,
                    p: [126, 2, 1, 2, 7]
                }, {
                    key: false,
                    p: [126, 2, 1, 2, 8]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 0]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 1]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 2]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 3]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 4]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 5]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 6]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 7]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 8]
                }, {
                    key: false,
                    p: [126, 2, 1, 3, 9]
                }, {
                    key: false,
                    p: [126, 2, 1, 4, 2]
                }, {
                    key: false,
                    p: [126, 2, 1, 4, 3]
                }, {
                    key: false,
                    p: [126, 2, 1, 4, 4]
                }, {
                    key: false,
                    p: [126, 2, 1, 4, 5]
                }, {
                    key: false,
                    p: [126, 2, 1, 4, 6]
                }, {
                    key: false,
                    p: [126, 2, 1, 4, 7]
                }]
            }
        };
    });
})(angular["module"]("app"));